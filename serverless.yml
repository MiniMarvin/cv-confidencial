service: cv-confidencial
# app and org for use with dashboard.serverless.com
app: cv-confidencial
org: minimarvin

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

custom:
  CONFIDENTIAL_BUCKET_NAME: ${opt:stage, self:provider.stage}-${self:service}-confidential-cv-result
  CONFIDENTIAL_BUCKET: aws:s3:::${self:custom.CONFIDENTIAL_BUCKET_NAME}
  CV_INPUT_BUCKET_NAME: ${opt:stage, self:provider.stage}-${self:service}-input-cv
  CV_INPUT_BUCKET: aws:s3:::${self:custom.CV_INPUT_BUCKET_NAME}

package:
  exclude:
    - coverage/**
    - fileService/tests/**
    - fileService/.gitignore
    - .gitignore
    - pdfparse/.gitignore
    - pdfparse/.pytest_cache/**
    - pdfparse/.venv/**
    - pdfparse/assets/**
    - pdfparse/output/**
    - pdfparse/poetry.lock
    - pdfparse/tests/**
    - pdfparse/pyproject.toml
    - pdfparse/README.rst

provider:
  name: aws
  lambdaHashingVersion: 20201221
  stage: dev
  region: us-east-1
  environment:
    CONFIDENTIAL_BUCKET_NAME: ${self:custom.CONFIDENTIAL_BUCKET_NAME}
    CONFIDENTIAL_BUCKET: ${self:custom.CONFIDENTIAL_BUCKET}
    CV_INPUT_BUCKET_NAME: ${self:custom.CV_INPUT_BUCKET_NAME}
    CV_INPUT_BUCKET: ${self:custom.CV_INPUT_BUCKET}
  
  # TODO: make every function has it's own role to only be able to read or put on necessary buckets
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - s3:ListBucket
            - s3:PutObject
            - s3:PutObjectAcl
            - s3:GetObject
          Resource: '*'

functions:
  parse_pdf:
    runtime: python3.8
    handler: pdfparse/pdfparse/handler.pdf_parse
    layers:
      - arn:aws:lambda:${self:provider.region}:770693421928:layer:Klayers-p38-PyMUPDF:1
    events:
      - s3: 
          bucket: ${self:custom.CV_INPUT_BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules: 
            - prefix: public/
            - suffix: .pdf
          existing: true
  get_pdf_upload_link:
    runtime: nodejs14.x
    handler: fileService/build/handler.putPdfUrl
    events:
      - httpApi: 
          method: GET
          path: /pdf/upload
  get_pdf_download_link:
    runtime: nodejs14.x
    handler: fileService/build/handler.getConfidentialPdfUrl
    events:
      - httpApi: 
          method: GET
          path: /pdf/download

# you can add CloudFormation resource templates here
resources:
  Resources:
    ConfidentialCVResult:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.CONFIDENTIAL_BUCKET_NAME}
        Tags:
          - Key: service
            Value: ${self:service}
    CVInput:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.CV_INPUT_BUCKET_NAME}
        Tags:
          - Key: service
            Value: ${self:service}
